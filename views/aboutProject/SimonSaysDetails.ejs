<% layout("/layouts/boilerplate") -%>
<h1 class="text-center mt-2">Project Details</h1>
<div class="card mb-3 bg-transparent mt-3 mb-5">
  <img src="/images/js-SimonSays-game.png" class="card-img-top rounded shadow w-75 mx-auto" alt="img">
  <div class="card-body">
    <h5 class="card-title text-center"><i class="fas fa-gamepad"></i> Simon Says Game (HTML, CSS & Core JavaScript)</h5>
    <p class="card-text text-center">“A Test of Memory, Logic, and My JavaScript Mastery!”</p>
    <p class="card-text text-center">
      The Simon Says Game is one of my most challenging and rewarding projects, built entirely using core JavaScript, HTML, and CSS. Unlike my simpler projects, this game pushed me to deeply understand JavaScript’s call stack, timing functions, and state management, making it a true milestone in my learning journey.
    </p>
    <p><b>Why This Project Stands Out</b>
    <ul>
      <li>It’s not just about visuals; the logic behind the game is multi-layered and event-driven.</li>
      <li>Managing the sequence of colors and user inputs required precise control of function calls and a strong grasp of JavaScript’s execution model.
      </li>
      <li>I implemented asynchronous patterns using <strong>setTimeout</strong> to create smooth animations and delays between rounds.
      </li>
      <li>The game keeps track of levels, detects failures, and restarts intelligently—all using handwritten logic without frameworks or libraries.
      </li>
    </ul>
    </p>
    <p><b>What I Learned</b>
      <br>
      <strong>Deep Dive into the Call Stack</strong>
      <ul>
        <li>Understanding how functions execute and return in sequence.</li>
        <li>Handling nested calls while ensuring the game flow remains predictable.</li>
      </ul>
      <strong>Complex State Management</strong>
      <ul>
        <li>Storing and updating sequences dynamically.</li>
        <li>Validating user inputs step-by-step against the generated pattern.</li>
      </ul>
      <strong> Timing and User Experience</strong>
      <ul>
        <li>Coordinating animations with logic using time delays.</li>
        <li>Ensuring the UI reacts seamlessly to user actions.</li>
      </ul>
      <strong> Error Handling & Scalability</strong>
      <ul>
        <li>Writing clean, modular code to make debugging easier.</li>
        <li>Structuring the logic so that new features (e.g., difficulty modes) can be added later.</li>
      </ul>
    </p>
    <p>
      <b>Effort & Dedication</b>
      This project took three weeks of focused work, involving multiple iterations, debugging sessions, and refinements. It represents my commitment to problem-solving and my ability to tackle complex interactive applications with just the core JavaScript language.
    </p>
  </div>
</div>